diff --git a/configure.ac b/configure.ac
index d6661df1..20dae220 100644
--- a/configure.ac
+++ b/configure.ac
@@ -484,7 +484,7 @@ dnl -- VA-API                                                                --
 dnl ---------------------------------------------------------------------------
 
 dnl Core API
-PKG_CHECK_MODULES([LIBVA], [libva >= $VAAPI_REQ libva < 0.99.0])
+PKG_CHECK_MODULES([LIBVA], [libva >= $VAAPI_REQ libva != 0.99.0])
 VA_VERSION_STR=`$PKG_CONFIG --modversion libva`
 VA_DRIVERS_PATH=`$PKG_CONFIG --variable=driverdir libva`
 AC_DEFINE_UNQUOTED([VA_DRIVERS_PATH], ["$VA_DRIVERS_PATH"],
diff --git a/gst-libs/gst/vaapi/gstvaapicompat.h b/gst-libs/gst/vaapi/gstvaapicompat.h
index 781e30d6..697046ec 100644
--- a/gst-libs/gst/vaapi/gstvaapicompat.h
+++ b/gst-libs/gst/vaapi/gstvaapicompat.h
@@ -37,6 +37,12 @@
 #define vaAssociateSubpicture   vaAssociateSubpicture2
 #endif
 
+#if VA_CHECK_VERSION(1,0,0)
+#define VA_ENC_PACKED_HEADER_H264_SEI VAEncPackedHeaderRawData
+#else
+#define VA_ENC_PACKED_HEADER_H264_SEI VAEncPackedHeaderH264_SEI
+#endif
+
 /* Compatibility glue with VA-API 0.34 */
 #if VA_CHECK_VERSION(0,34,0)
 # include <va/va_compat.h>
diff --git a/gst-libs/gst/vaapi/gstvaapidecoder.c b/gst-libs/gst/vaapi/gstvaapidecoder.c
index ce9c065b..9e716db2 100644
--- a/gst-libs/gst/vaapi/gstvaapidecoder.c
+++ b/gst-libs/gst/vaapi/gstvaapidecoder.c
@@ -1182,10 +1182,8 @@ gst_vaapi_decoder_update_caps (GstVaapiDecoder * decoder, GstCaps * caps)
   if (!decoder_caps)
     return FALSE;
 
-  if (gst_caps_is_always_compatible (caps, decoder_caps)) {
-    set_caps (decoder, caps);
-    return TRUE;
-  }
+  if (gst_caps_is_always_compatible (caps, decoder_caps))
+    return set_caps (decoder, caps);
 
   profile = gst_vaapi_profile_from_caps (caps);
   if (profile == GST_VAAPI_PROFILE_UNKNOWN)
@@ -1194,8 +1192,11 @@ gst_vaapi_decoder_update_caps (GstVaapiDecoder * decoder, GstCaps * caps)
   if (codec == 0)
     return FALSE;
   if (codec == decoder->codec) {
-    set_caps (decoder, caps);
-    return TRUE;
+    if (set_caps (decoder, caps)) {
+      return
+          gst_vaapi_decoder_decode_codec_data (decoder) ==
+          GST_VAAPI_DECODER_STATUS_SUCCESS;
+    }
   }
 
   return FALSE;
diff --git a/gst-libs/gst/vaapi/gstvaapidecoder_h264.c b/gst-libs/gst/vaapi/gstvaapidecoder_h264.c
index da9b291e..ae644c68 100644
--- a/gst-libs/gst/vaapi/gstvaapidecoder_h264.c
+++ b/gst-libs/gst/vaapi/gstvaapidecoder_h264.c
@@ -3781,9 +3781,12 @@ fill_picture (GstVaapiDecoderH264 * decoder, GstVaapiPictureH264 * picture)
   COPY_FIELD (sps, bit_depth_luma_minus8);
   COPY_FIELD (sps, bit_depth_chroma_minus8);
   COPY_FIELD (sps, num_ref_frames);
+#if !VA_CHECK_VERSION(1,0,0)
+  /* Deprecate H.264 baseline profile and FMO support */
   COPY_FIELD (pps, num_slice_groups_minus1);
   COPY_FIELD (pps, slice_group_map_type);
   COPY_FIELD (pps, slice_group_change_rate_minus1);
+#endif
   COPY_FIELD (pps, pic_init_qp_minus26);
   COPY_FIELD (pps, pic_init_qs_minus26);
   COPY_FIELD (pps, chroma_qp_index_offset);
@@ -4309,6 +4312,9 @@ gst_vaapi_decoder_h264_decode_codec_data (GstVaapiDecoder * base_decoder,
   GstH264ParserResult result;
   guint i, ofs, num_sps, num_pps;
 
+  if (!priv->is_opened)
+    return GST_VAAPI_DECODER_STATUS_SUCCESS;
+
   unit.parsed_info = NULL;
 
   if (buf_size < 7)
diff --git a/gst-libs/gst/vaapi/gstvaapidecoder_h265.c b/gst-libs/gst/vaapi/gstvaapidecoder_h265.c
index bc80754e..53093d3e 100644
--- a/gst-libs/gst/vaapi/gstvaapidecoder_h265.c
+++ b/gst-libs/gst/vaapi/gstvaapidecoder_h265.c
@@ -2653,6 +2653,9 @@ gst_vaapi_decoder_h265_decode_codec_data (GstVaapiDecoder *
   guint num_nal_arrays, num_nals;
   guint i, j, ofs;
 
+  if (!priv->is_opened)
+    return GST_VAAPI_DECODER_STATUS_SUCCESS;
+
   unit.parsed_info = NULL;
   if (buf_size < 23)
     return GST_VAAPI_DECODER_STATUS_ERROR_NO_DATA;
diff --git a/gst-libs/gst/vaapi/gstvaapiencoder_h264.c b/gst-libs/gst/vaapi/gstvaapiencoder_h264.c
index 0d4d96cc..f091eb98 100644
--- a/gst-libs/gst/vaapi/gstvaapiencoder_h264.c
+++ b/gst-libs/gst/vaapi/gstvaapiencoder_h264.c
@@ -1506,7 +1506,7 @@ add_packed_sei_header (GstVaapiEncoderH264 * encoder,
   data_bit_size = GST_BIT_WRITER_BIT_SIZE (&bs);
   data = GST_BIT_WRITER_DATA (&bs);
 
-  packed_sei_param.type = VAEncPackedHeaderH264_SEI;
+  packed_sei_param.type = VA_ENC_PACKED_HEADER_H264_SEI;
   packed_sei_param.bit_length = data_bit_size;
   packed_sei_param.has_emulation_bytes = 0;
 
diff --git a/gst-libs/gst/vaapi/gstvaapiprofile.c b/gst-libs/gst/vaapi/gstvaapiprofile.c
index 9c353c56..6e8fd0a6 100644
--- a/gst-libs/gst/vaapi/gstvaapiprofile.c
+++ b/gst-libs/gst/vaapi/gstvaapiprofile.c
@@ -94,8 +94,10 @@ static const GstVaapiProfileMap gst_vaapi_profiles[] = {
   {GST_VAAPI_PROFILE_H263_BASELINE, VAProfileH263Baseline,
       "video/x-h263, variant=itu, h263version=h263", "baseline"},
 #endif
+#if !VA_CHECK_VERSION(1,0,0)
   {GST_VAAPI_PROFILE_H264_BASELINE, VAProfileH264Baseline,
       "video/x-h264", "baseline"},
+#endif
 #if VA_CHECK_VERSION(0,31,1)
   {GST_VAAPI_PROFILE_H264_CONSTRAINED_BASELINE,
         VAProfileH264ConstrainedBaseline,
diff --git a/gst-libs/gst/vaapi/gstvaapiutils.c b/gst-libs/gst/vaapi/gstvaapiutils.c
index 0ed1efe1..0f1c2cfa 100644
--- a/gst-libs/gst/vaapi/gstvaapiutils.c
+++ b/gst-libs/gst/vaapi/gstvaapiutils.c
@@ -46,15 +46,43 @@
 #define STRCASE(x)      case x: return STRINGIFY(x)
 
 #if VA_CHECK_VERSION (0,40,0)
-static void
-gst_vaapi_log (const char *message)
+static gchar *
+strip_msg (const char *message)
 {
   gchar *msg;
 
   msg = g_strdup (message);
+  if (!msg)
+    return NULL;
+  return g_strstrip (msg);
+}
+
+#if VA_CHECK_VERSION (1,0,0)
+static void
+gst_vaapi_err (void *data, const char *message)
+{
+  gchar *msg;
+
+  msg = strip_msg (message);
+  if (!msg)
+    return;
+  GST_ERROR ("%s", msg);
+  g_free (msg);
+}
+#endif
+
+static void
+gst_vaapi_log (
+#if VA_CHECK_VERSION (1,0,0)
+    void *data,
+#endif
+    const char *message)
+{
+  gchar *msg;
+
+  msg = strip_msg (message);
   if (!msg)
     return;
-  g_strchomp (msg);
   GST_INFO ("%s", msg);
   g_free (msg);
 }
@@ -66,7 +94,10 @@ vaapi_initialize (VADisplay dpy)
   gint major_version, minor_version;
   VAStatus status;
 
-#if VA_CHECK_VERSION (0,40,0)
+#if VA_CHECK_VERSION (1,0,0)
+  vaSetErrorCallback (dpy, gst_vaapi_err, NULL);
+  vaSetInfoCallback (dpy, gst_vaapi_log, NULL);
+#elif VA_CHECK_VERSION (0,40,0)
   vaSetInfoCallback (gst_vaapi_log);
 #endif
 
@@ -175,7 +206,9 @@ string_of_VAProfile (VAProfile profile)
       MAP (H263Baseline);
       MAP (H264ConstrainedBaseline);
 #endif
+#if !VA_CHECK_VERSION(1,0,0)
       MAP (H264Baseline);
+#endif
       MAP (H264Main);
       MAP (H264High);
 #if VA_CHECK_VERSION(0,35,2)
diff --git a/gst/vaapi/gstvaapidecode.c b/gst/vaapi/gstvaapidecode.c
index 9401fe81..71436cd1 100644
--- a/gst/vaapi/gstvaapidecode.c
+++ b/gst/vaapi/gstvaapidecode.c
@@ -1071,6 +1071,8 @@ gst_vaapidecode_set_format (GstVideoDecoder * vdec, GstVideoCodecState * state)
 
   if (!gst_vaapi_decode_input_state_replace (decode, state))
     return TRUE;
+  if (gst_vaapidecode_drain (vdec) == GST_FLOW_ERROR)
+    return FALSE;
   if (!gst_vaapidecode_update_sink_caps (decode, state->caps))
     return FALSE;
   if (!gst_vaapi_plugin_base_set_caps (plugin, decode->sinkpad_caps, NULL))
diff --git a/gst/vaapi/gstvaapiencode.c b/gst/vaapi/gstvaapiencode.c
index 5712a7d8..fc50f71b 100644
--- a/gst/vaapi/gstvaapiencode.c
+++ b/gst/vaapi/gstvaapiencode.c
@@ -552,6 +552,22 @@ set_codec_state (GstVaapiEncode * encode, GstVideoCodecState * state)
   return TRUE;
 }
 
+static gboolean
+gst_vaapiencode_drain (GstVaapiEncode * encode)
+{
+  GstVaapiEncoderStatus status;
+
+  if (!encode->encoder)
+    return TRUE;
+
+  status = gst_vaapi_encoder_flush (encode->encoder);
+  if (status != GST_VAAPI_ENCODER_STATUS_SUCCESS)
+    return FALSE;
+  gst_vaapiencode_purge (encode);
+
+  return TRUE;
+}
+
 static gboolean
 gst_vaapiencode_set_format (GstVideoEncoder * venc, GstVideoCodecState * state)
 {
@@ -567,6 +583,9 @@ gst_vaapiencode_set_format (GstVideoEncoder * venc, GstVideoCodecState * state)
           state->caps, NULL))
     return FALSE;
 
+  if (!gst_vaapiencode_drain (encode))
+    return FALSE;
+
   if (encode->input_state)
     gst_video_codec_state_unref (encode->input_state);
   encode->input_state = gst_video_codec_state_ref (state);
@@ -763,17 +782,14 @@ static gboolean
 gst_vaapiencode_flush (GstVideoEncoder * venc)
 {
   GstVaapiEncode *const encode = GST_VAAPIENCODE_CAST (venc);
-  GstVaapiEncoderStatus status;
 
   if (!encode->encoder)
     return FALSE;
 
   GST_LOG_OBJECT (encode, "flushing");
 
-  status = gst_vaapi_encoder_flush (encode->encoder);
-  if (status != GST_VAAPI_ENCODER_STATUS_SUCCESS)
+  if (!gst_vaapiencode_drain (encode))
     return FALSE;
-  gst_vaapiencode_purge (encode);
 
   gst_vaapi_encoder_replace (&encode->encoder, NULL);
   if (!ensure_encoder (encode))
diff --git a/meson.build b/meson.build
index 5b41dda7..beb74e4f 100644
--- a/meson.build
+++ b/meson.build
@@ -15,6 +15,7 @@ else
   gst_version_nano = 0
 endif
 
+libva_req = ['>= 0.30.4', '!= 0.99.0']
 glib_req = '>= 2.40.0'
 gst_req = '>= @0@.@1@.0'.format(gst_version_major, gst_version_minor)
 
@@ -37,7 +38,7 @@ gstcodecparsers_dep = dependency('gstreamer-codecparsers-1.0', version : gst_req
 gstgl_dep = dependency('gstreamer-gl-1.0', version : gst_req,
     fallback : ['gst-plugins-bad', 'gstgl_dep'], required: false)
 gmodule_dep = dependency('gmodule-2.0', required: false)
-libva_dep = dependency('libva', version: ['>= 0.30.4', '< 0.99.0'])
+libva_dep = dependency('libva', version: libva_req)
 
 libva_drm_dep = dependency('libva-drm', version: '>= 0.33.0', required: false)
 libva_wayland_dep = dependency('libva-wayland', version: '>= 0.33.0', required: false)
